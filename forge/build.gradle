plugins {
    id "com.github.johnrengelman.shadow" version "7.1.2"
}

// Include resources generated by data generators.
sourceSets.main.resources { srcDir 'src/generated/resources' }

architectury {
    platformSetupLoomIde()
    forge()
}

loom {
    accessWidenerPath = project(":common").loom.accessWidenerPath

    forge {
        mixinConfig "signpost-common.mixins.json"
        convertAccessWideners = true
        extraAccessWideners.add loom.accessWidenerPath.get().asFile.name
    }

    runs {
        data {
            data()
            programArgs "--all", "--mod", "${mod_id}"
            programArgs "--output", 'src/generated/resources'
        }
    }
}

configurations {
    common
    shadowCommon // Don't use shadow from the shadow plugin since it *excludes* files.
    compileClasspath.extendsFrom common
    runtimeClasspath.extendsFrom common
    developmentForge.extendsFrom common
}

dependencies {
    forge "net.minecraftforge:forge:${minecraft_version}-${forge_version}"
    // Remove the next line if you don't want to depend on the API
    modApi "dev.architectury:architectury-forge:${architectury_version}"

    common(project(path: ":common", configuration: "namedElements")) { transitive false }
    shadowCommon(project(path: ":common", configuration: "transformProductionForge")) { transitive = false }

    modImplementation "curse.maven:balm-${balm_project_id}:${balm_file_id}"
    modImplementation "curse.maven:waystones-${waystones_project_id}:${waystones_file_id}"

//    modImplementation "curse.maven:architectury-api-${architectury_project_id}:${architectury_file_id}"
//    modImplementation "curse.maven:cloth-config-${cloth_project_id}:${cloth_file_id}"
//    // Validation crashes debug server
//    modCompileOnly "curse.maven:antique-atlas-${atlas_project_id}:${atlas_file_id}"

    compileOnly "com.telepathicgrunt:RepurposedStructures:${repurposed_structures_version}+${minecraft_version}-forge"
    // modImplementation "curse.maven:repurposed-structures-${repurposed_structures_project_id}:${repurposed_structures_file_id}"
}

processResources {
    var replaceProperties = [
            minecraft_version: minecraft_version, minecraft_version_range: minecraft_version_range,
            forge_version: forge_version, forge_version_range: forge_version_range,
            loader_version_range: loader_version_range,
            mod_id: mod_id, mod_name: mod_name, mod_license: mod_license, mod_version: mod_version,
            mod_authors: mod_authors, mod_description: mod_description,
            mod_issue_tracker: mod_issue_tracker, mod_source: mod_source, mod_website: mod_website,
    ]
    inputs.properties replaceProperties

    filesMatching(['META-INF/mods.toml', 'pack.mcmeta']) {
        expand replaceProperties + [project: project]
    }
}

shadowJar {
    exclude "fabric.mod.json"
    exclude "architectury.common.json"

    configurations = [project.configurations.shadowCommon]
    archiveClassifier = "dev-shadow"
}

remapJar {
    input.set shadowJar.archiveFile
    dependsOn shadowJar
}

sourcesJar {
    def commonSources = project(":common").sourcesJar
    dependsOn commonSources
    from commonSources.archiveFile.map { zipTree(it) }
}

components.java {
    withVariantsFromConfiguration(project.configurations.shadowRuntimeElements) {
        skip()
    }
}

publishing {
    publications {
        mavenForge(MavenPublication) {
            artifactId = rootProject.archives_base_name + "-" + project.name
            from components.java
        }
    }

    // See https://docs.gradle.org/current/userguide/publishing_maven.html for information on how to set up publishing.
    repositories {
        maven {
            url "file://${project.projectDir}/mcmodsrepo"
        }
    }
}
